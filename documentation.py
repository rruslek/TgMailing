from pyrogram import Client, filters
from pyrogram.types import Message
from pyrogram.handlers import MessageHandler

from config import admin_id, version


async def cmd_help(userbot: Client, message: Message):
    """Помощь"""
    main_account = (await userbot.get_users(admin_id)).first_name
    bot_account = (await userbot.get_users('self')).first_name
    text = f'[**Помощь всегда можно получить по команде** `/help` или `/doc`. ' \
           f'Все команды копируются по нажатию на них]\n\n' \
           f'**Основные понятия.**\n' \
           f'__Основной аккаунт__ — это ваш аккаунт **({main_account})**.\n' \
           f'__Аккаунт бота__ — это я! **({bot_account})**\n' \
           f'__Пост__ — рекламное сообщение, которое вы собираетесь рассылать.\n' \
           f'__Интервал рассылки__ — временной интервал между двумя ' \
           f'последовательными __итерациями рассылки__.\n\n' \
           f'**Быстрый старт.**\n' \
           f'Все команды необходимо писать с основного аккаунта на аккаунт бота. ' \
           f'Чтобы начать рассылку, необходимо:\n' \
           f'**1.** Добавить ваш __пост__ в "избранное" на __аккаунте бота__.\n' \
           f'**2. [optional]** Установить __интервал рассылки__. ' \
           f'Например, команда `/delta 120` установит интервал в 120 минут.\n' \
           f'**3.** Запустить рассылку командой `/start`.\n\n' \
           f'Готово! Теперь бот будет рассылать ваш пост каждые 120 минут. ' \
           f'Рассылаемый пост должен быть **последним** сообщением в "избранном" бота! ' \
           f'Остановить рассылку можно командой `/stop`.\n\n' \
           f'**Дополнительно.**\n' \
           f'Чтобы получить информацию по каждому из пунктов ниже, отправьте соответствующие команды.\n\n' \
           f'<u>Полезное</u>:\n' \
           f'__Как работает рассылка?__: `/about_mailing`\n' \
           f'__Каким должен быть рекламный пост?__: `/about_post`\n' \
           f'__Как найти избранное?__: `/about_saved_messages`\n' \
           f'\n' \
           f'<u>Другие функции бота</u>:\n' \
           f'__Рассылка нескольких сообщений__: `/info_1`\n' \
           f'__Авто-подписка__: `/info_2`\n' \
           f'__Парсинг участников__: `/info_3`\n' \
           f'__Резервные копии чатов__: `/info_4`\n' \
           f'\n' \
           f'__mailing v{version}__ [documentation]'
    await userbot.send_message(chat_id=admin_id, text=text)


async def cmd_about_mailing(userbot: Client, message: Message):
    text = '**Основные понятия:**\n' \
           '__Итерация рассылки__ — последовательная отправка поста в чаты.\n' \
           '__Рассылка__ — это последовательность итераций рассылки.\n' \
           '\n' \
           '**Как работает рассылка?**' \
           '\n' \
           'Запуская рассылку, бот начинает осуществлять __итерации рассылки__. ' \
           '**Средний** промежуток времени между итерациями - это и есть __интервал рассылки__ ' \
           '(фактически, перед очередной итерацией, генерируется параметр ' \
           'variation, который принимает значения от -20 до +20 минут, затем он складывается с интервалом). ' \
           'Рассылка остановится только в случае, когда бот получит команду `/stop` или получит спам.' \
           '\n\n' \
           'Если ваш пост содержит фотографию/gif/видео, то бот будет отправлять **исходное** сообщение в те чаты, ' \
           'где разрешена отправка медиа. В чаты, где медиа запрещены, будет отправлен только **текст** поста.' \
           '\n\n' \
           'Перед началом итерации бот берёт **последнее** сообщение из "избранного". ' \
           'Следовательно, чтобы сменить пост **не обязательно** останавливать рассылку: ' \
           'просто **отредактируйте** текущий пост или же добавьте в избранное **новый**.' \
           '\n\n' \
           'Бот рассылает пост только по тем чатам, на которые он был подписан на начало рассылки. ' \
           'Если вы хотите добавить новые чаты, остановите рассылку, подпишитесь на требуемые чаты с аккаунта бота, ' \
           'затем запустите рассылку снова (не ранее, чем через час от момента конца последней итерации).'

    await userbot.send_message(chat_id=admin_id, text=text)


async def cmd_about_post(userbot: Client, message: Message):
    text = '**Каким должен быть рекламный пост?**' \
           '\n' \
           '1. Пост __может__ содержать до **одного медиа** (фото/gif/видео).\n' \
           '2. Пост __должен__ быть **без превью** ссылки.\n' \
           '\n' \
           'Превью ссылки - это окошко внизу сообщения, отражающее суть содержимого ссылки. ' \
           'Чтобы убрать превью, необходимо нажать крестик над полем для ввода в меню ' \
           'редактирования сообщения.'

    await userbot.send_message(chat_id=admin_id, text=text)


async def cmd_about_saved_messages(userbot: Client, message: Message):
    text = '**Как найти избранное?**' \
           '\n' \
           'Зайдите на __аккаунт бота__, перейдите в любой диалог, например, ' \
           'в диалог с __основным аккаунтом__. Нажмите на любое сообщение и выберите пункт ' \
           '"переслать". Откроется список чатов, в которые доступна пересылка. ' \
           'Среди них и будет "избранное" (saved_messages).' \
           '\n' \
           'Обратите внимание, что рассылаться будет **последнее** сообщение из "избранного", ' \
           'поэтому, перед началом рассылки, убедитесь, что ваш рекламный пост является ' \
           'таковым (последним в избранном!).'

    await userbot.send_message(chat_id=admin_id, text=text)


async def cmd_info_1(userbot: Client, message: Message):
    text = '**Рассылка нескольких сообщений**\n' \
           '**///** Запускается командой `/start N`, где N - количество рекламных сообщений от 1 до 10.\n' \
           '**///** Остановка - `/stop`.\n' \
           '\n' \
           'Если вы хотите рассылать **одно** сообщение, то напишите боту `/start` или `/start 1`.\n' \
           '\n' \
           'Если же вы хотите рассылать более одного сообщения (например 3), ' \
           'то в "избранное" на __аккаунте бота__ отправьте 3 рекламных __поста__ так, ' \
           'чтобы они шли друг за другом и были **последними** в "избранном". ' \
           'Затем напишите боту `/start 3`.\n' \
           '\n' \
           '*Рассылка* будет происходить следующим образом:\n' \
           'Итерация **№1**: рассылается пост **№1**\n' \
           'Итерация **№2**: рассылается пост **№2**\n' \
           'Итерация **№3**: рассылается пост **№3**\n' \
           'Итерация **№4**: рассылается пост **№1**\n' \
           'Итерация **№5**: рассылается пост **№2**\n' \
           '...и так далее...\n' \
           '\n' \
           'Так же как и в случае с рассылкой одного сообщения вы можете редактировать посты. ' \
           'Можно и удалить один из постов и заменить его на другой, но будьте внимательны: ' \
           'нужно чтобы количество рассылаемых рекламных постов было равно 3 и они шли друг ' \
           'за другом в конце "избранного"!'

    await userbot.send_message(chat_id=admin_id, text=text)


async def cmd_info_2(userbot: Client, message: Message):
    text = '**Авто-подписка**\n' \
           '**///** Запускается командой `/subscribe`.\n' \
           '**///** Остановка - /stop.\n' \
           '\n' \
           '__Авто-подписка__ — это функция, позволяющая в автоматическом ' \
           'режиме подписываться на новые чаты с аккаунта бота, тем самым ' \
           'расширяя множество групп для рассылки.\n' \
           '\n' \
           'Отправьте боту сообщение, начинающееся с команды  `/subscribe`, ' \
           'содержащее ссылки на чаты. Бот начнёт подписываться на чаты ' \
           '(примерно один чат в 6 минут). Бот просто подписывается, но не уведомляет ' \
           'об успешных подписках. Если же подписка не удалась, бот отправляет ' \
           'ссылку на чат, с которым возникла проблема, но сам процесс ' \
           'авто-подписки не прекращается.'

    await userbot.send_message(chat_id=admin_id, text=text)


async def cmd_info_3(userbot: Client, message: Message):
    text = '**Парсинг участников**\n' \
           '**///** Запускается командами `/parse chat_id` или `/parse! chat_id`, ' \
           'где chat_id - это id или username чата. О разнице этих команд см. ниже.\n' \
           '**///** Остановка - `/stop`.\n' \
           '\n' \
           '__Парсинг__ — это получение списка юзернеймов участников чата. ' \
           'Главное условие, при котором возможен парсинг - это наличие подписки на нужный чат.\n' \
           '\n' \
           'Чтобы получить список участников чата, с юзернеймом @чат - введите команду `/parse @чат`. ' \
           'Или же `/parse https://t.me/чат`. Если группа не имеет юзернейма, то ее можно запарсить по id. ' \
           'Перейдите в web-версию telegram, и откройте нужный чат. ' \
           'Последнее число в ссылке на чат в адресной строке браузера - это и есть id чата ' \
           '(начинается на -100). Далее введите команду `/parse -10012345678` (с нужным айди, разумеется).\n' \
           '\n' \
           'Если же результат поиска - пустой файл, это значит, что парсинг не удался из-за того, ' \
           'что в группе скрыты участники. Остаётся единственный вариант получения юзернеймов участников. ' \
           'Введите ту же самую команду, но добавьте восклицательный знак: `/parse! @чат`.'

    await userbot.send_message(chat_id=admin_id, text=text)


async def cmd_info_4(userbot: Client, message: Message):
    text = '**Резервные копии чатов**\n' \
           '**///** Запускается командой `/get_chats`\n' \
           '\n' \
           'Вы получите текстовый документ со ссылками на все чаты, на которые подписан бот!'

    await userbot.send_message(chat_id=admin_id, text=text)


def register_doc_handlers(userbot: Client):
    userbot.add_handler(
        MessageHandler(
            cmd_help,
            filters=filters.command(['help', 'doc']) & filters.chat(admin_id)
        )
    )

    userbot.add_handler(
        MessageHandler(
            cmd_about_mailing,
            filters=filters.command('about_mailing') & filters.chat(admin_id)
        )
    )

    userbot.add_handler(
        MessageHandler(
            cmd_about_post,
            filters=filters.command('about_post') & filters.chat(admin_id)
        )
    )

    userbot.add_handler(
        MessageHandler(
            cmd_about_saved_messages,
            filters=filters.command('about_saved_messages') & filters.chat(admin_id)
        )
    )

    userbot.add_handler(
        MessageHandler(
            cmd_info_1,
            filters=filters.command('info_1') & filters.chat(admin_id)
        )
    )

    userbot.add_handler(
        MessageHandler(
            cmd_info_2,
            filters=filters.command('info_2') & filters.chat(admin_id)
        )
    )

    userbot.add_handler(
        MessageHandler(
            cmd_info_3,
            filters=filters.command('info_3') & filters.chat(admin_id)
        )
    )

    userbot.add_handler(
        MessageHandler(
            cmd_info_4,
            filters=filters.command('info_4') & filters.chat(admin_id)
        )
    )
